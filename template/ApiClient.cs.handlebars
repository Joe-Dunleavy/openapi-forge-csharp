using System;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace {{toNameSpace info.title}} {


    // {{info.title}}
    public class ApiClient  : IApiClient
    {
      private const string ContentType = "application/json";
      private readonly Configuration _config;
      private readonly HttpClient _client;

      public ApiClient(HttpClient httpClient, Configuration config) {
        _config = config;
        _client = httpClient;
      }

      {{#each paths}}
      {{setVar "path" @key}}
      {{#each this}}
      {{#if (pathSupportsJson this)}}
        public async Task{{#if _response.schema}}<{{typeConvert _response.schema}}>{{/if}} {{operationId}}({{#each _sortedParameters}}{{typeConvert schema}}{{#if _optional}}?{{/if}} {{name}} {{#if schema.default}} = {{{quoteIfString schema.default}}}{{/if}}{{#unless @last}},{{/unless}}{{/each}})
        { 
          {{#if (bodyParameterExists _sortedParameters)}}var content = new StringContent(JsonSerializer.Serialize(body), Encoding.UTF8, ContentType);{{/if}}
          {{#if (queryParametersExist _sortedParameters)}}var queryString = new StringBuilder();
          {{#each _sortedParameters}}
          {{#if (isQueryParameter this)}}
          queryString.Append($"{(queryString.Length == 0 ? "?" : "&")}{nameof({{this.name}})}={ {{this.name}} }");
          {{/if}}
          {{/each}}
          {{/if}}
          var response = await _client.{{clientMethodByVerb @key}}($"{{@root.path}}{{#if (queryParametersExist _sortedParameters)}}{queryString}{{/if}}"{{#if (bodyParameterExists _sortedParameters)}}, content{{/if}});
          response.EnsureSuccessStatusCode();
          {{#if _response.schema}}
          var responseBody = await response.Content.ReadAsStringAsync();
          return JsonSerializer.Deserialize<{{typeConvert _response.schema}}>(responseBody);
          {{/if}}
        }
        {{#unless @last}}
        
        {{/unless}}
        {{/if}}
      {{/each}}  
      {{/each}}
    }
}