using System;
using System.Net;
using System.Net.Http;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace {{toSafeName info.title}} {


    // {{info.title}}
    public class ApiClient  : IApiClient
    {
      private const string ContentType = "application/json";
      private readonly Configuration _config;
      private readonly HttpClient _client;

      public ApiClient(HttpClient httpClient, Configuration config) {
        _config = config;
        _client = httpClient;
      }

      {{#each paths}}
      {{setVar "path" @key}}
      {{#each this}}
      {{#if (pathSupportsJson this)}}
        public async Task{{#if _response.schema}}<{{safeTypeConvert _response.schema}}>{{/if}} {{toSafeName operationId}}({{#each _sortedParameters}}{{nullableTypeConvert schema _optional}} {{name}}{{#if schema.default}} = {{{quoteIfString schema.default}}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}})
        {
          {{#if (bodyParameterExists _sortedParameters)}}
          var content = new StringContent(JsonSerializer.Serialize(body), Encoding.UTF8, ContentType);
          {{/if}}
          {{createQueryString _sortedParameters}}
          var requestUri = $"{_client.BaseAddress}{{@root.path}}{{#if (queryParametersExist _sortedParameters)}}{queryString}{{/if}}";
          var response = await _client.{{clientMethodByVerb @key}}(requestUri{{#if (bodyParameterExists _sortedParameters)}}, content{{else if (mustHaveContentParameter @key)}}, null{{/if}});
          response.EnsureSuccessStatusCode();
          {{#if _response.schema}}
          var responseBody = await response.Content.ReadAsStringAsync();
          {{createReturnStatement _response.schema}}
          {{/if}}
        }
        {{#unless @last}}
        
        {{/unless}}
        {{else}}
        public Task{{#if _response.schema}}<{{safeTypeConvert _response.schema}}>{{/if}} {{toSafeName operationId}}({{#each _sortedParameters}}{{nullableTypeConvert schema _optional}} {{name}}{{#if schema.default}} = {{{quoteIfString schema.default}}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}})
        {
           throw new NotImplementedException("Operation '{{operationId}}' most likely does not support json encoded requests which are not supported by openapi forge.");
        }        
        {{/if}}
      {{/each}}  
      {{/each}}
    }
}